{"version":3,"file":"static/js/516.9a0936b1.chunk.js","mappings":"uMA6BA,UAzBa,WACX,OAAwBA,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,WAAS,GAArC,eAAOG,EAAP,KAAeC,EAAf,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAWR,OAVAE,QAAQC,IAAIH,IACZI,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAYL,GACTM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,MAAb,IACbF,MAAK,YAAe,IAAZV,EAAW,EAAXA,KACPC,EAAQD,GACRG,GAAU,EACX,GACJ,GAAE,CAACC,KAGF,+BACE,wBACGF,GACCF,EAAKa,KAAI,SAAAC,GACP,OAAO,wBAAoBA,EAAMC,OAAjBC,EAAAA,EAAAA,MACjB,OAIV,C,uJC5BD,IAAMC,EAAM,mCACL,SAASC,IACd,OAAOC,MAAM,yDAAD,OAA0DF,GACvE,CACM,SAASG,EAAWC,EAAOC,GAChC,OAAOH,MAAM,qDAAD,OAC2CF,EAD3C,kBACwDI,EADxD,iBACsEC,GAEnF,CACM,SAASC,EAAUC,GACxB,OAAOL,MAAM,wCAAD,OAEuBK,EAFvB,oBAEqCP,EAFrC,mBAIb,CACM,SAASR,EAAYe,GAC1B,OAAOL,MAAM,wCAAD,OAEuBK,EAFvB,4BAE6CP,EAF7C,mBAIb,CACM,SAASQ,EAAaD,GAC3B,OAAOL,MAAM,wCAAD,OAEuBK,EAFvB,4BAE6CP,EAF7C,0BAIb,C,uDCzBM,IAkBID,EAAS,eAACU,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACN,EAAIO,GAWvD,OAREP,IAFFO,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/cast/cast.jsx","servises/fetchFilms.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { nanoid } from 'nanoid';\nimport { fetchActors } from 'servises/fetchFilms';\nimport { useParams } from 'react-router-dom';\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const [isLoad, setIsLoad] = useState(false);\n  const { movieId } = useParams();\n  console.log(movieId);\n  useEffect(() => {\n    fetchActors(movieId)\n      .then(response => response.json())\n      .then(({ cast }) => {\n        setCast(cast);\n        setIsLoad(true);\n      });\n  }, [movieId]);\n\n  return (\n    <>\n      <ul>\n        {isLoad &&\n          cast.map(actor => {\n            return <li key={nanoid()}>{actor.name}</li>;\n          })}\n      </ul>\n    </>\n  );\n};\nexport default Cast;\n","const KEY = 'c209fa6cb0ce43326b8f217a57ec8985';\nexport function fetchPopularMovies() {\n  return fetch(`https://api.themoviedb.org/3/trending/all/day?api_key=${KEY}`);\n}\nexport function fetchFilms(query, page) {\n  return fetch(\n    `https://api.themoviedb.org/3/search/movie?api_key=${KEY}&query=${query}&page=${page}`\n  );\n}\nexport function fetchFilm(id) {\n  return fetch(\n    `\nhttps://api.themoviedb.org/3/movie/${id}?api_key=${KEY}&language=en-US`\n  );\n}\nexport function fetchActors(id) {\n  return fetch(\n    `\nhttps://api.themoviedb.org/3/movie/${id}/credits?api_key=${KEY}&language=en-US`\n  );\n}\nexport function fetchReviews(id) {\n  return fetch(\n    `\nhttps://api.themoviedb.org/3/movie/${id}/reviews?api_key=${KEY}&language=en-US&page=1`\n  );\n}\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["useState","cast","setCast","isLoad","setIsLoad","movieId","useParams","console","log","useEffect","fetchActors","then","response","json","map","actor","name","nanoid","KEY","fetchPopularMovies","fetch","fetchFilms","query","page","fetchFilm","id","fetchReviews","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}